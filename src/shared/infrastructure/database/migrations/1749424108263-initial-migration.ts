import { MigrationInterface, QueryRunner } from "typeorm";

export class InitialMigration1749424108263 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.paises
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
                descripcion character varying COLLATE pg_catalog."default",
                CONSTRAINT paises_pkey PRIMARY KEY (id)
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.ciudades
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                descripcion character varying COLLATE pg_catalog."default" NOT NULL,
                id_pais integer,
                CONSTRAINT "PK_4762ffb6e5d198cfec5606bc11e" PRIMARY KEY (id),
                CONSTRAINT id_pais FOREIGN KEY (id_pais)
                    REFERENCES public.paises (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.empresas
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                nombre character varying COLLATE pg_catalog."default",
                rubro character varying COLLATE pg_catalog."default",
                CONSTRAINT empresa_pkey PRIMARY KEY (id)
            );`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.entrevistas
            (
                calificacion character varying COLLATE pg_catalog."default",
                dificultad character varying COLLATE pg_catalog."default",
                id_evaluacion integer NOT NULL,
                CONSTRAINT entrevistas_pkey PRIMARY KEY (id_evaluacion),
                CONSTRAINT id_evaluacion FOREIGN KEY (id_evaluacion)
                    REFERENCES public.evaluaciones (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.evaluaciones
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                id_cargo integer,
                id_usuario integer,
                id_sucursal integer,
                id_empresa integer,
                id_tipo_contrato integer,
                desde date,
                hasta date,
                CONSTRAINT evaluacion_pkey PRIMARY KEY (id),
                CONSTRAINT id_cargo FOREIGN KEY (id_cargo)
                    REFERENCES public.cargos (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION,
                CONSTRAINT id_empresa FOREIGN KEY (id_empresa)
                    REFERENCES public.empresas (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID,
                CONSTRAINT id_sucursal FOREIGN KEY (id_sucursal)
                    REFERENCES public.sucursales (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID,
                CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
                    REFERENCES public.usuarios (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.sucursales
            (
                id_empresa integer NOT NULL,
                id_ciudad integer NOT NULL,
                telefono character varying COLLATE pg_catalog."default",
                email character varying COLLATE pg_catalog."default",
                cantidad_empleados character varying COLLATE pg_catalog."default",
                nombre character varying COLLATE pg_catalog."default",
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                CONSTRAINT sucursales_pkey PRIMARY KEY (id),
                CONSTRAINT id_ciudad FOREIGN KEY (id_ciudad)
                    REFERENCES public.ciudades (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION,
                CONSTRAINT id_empresa FOREIGN KEY (id_empresa)
                    REFERENCES public.empresas (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.cargos
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                descripcion character varying COLLATE pg_catalog."default",
                CONSTRAINT cargos_pkey PRIMARY KEY (id)
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.usuarios
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                nombre character varying COLLATE pg_catalog."default" NOT NULL,
                apellido character varying COLLATE pg_catalog."default" NOT NULL,
                email character varying COLLATE pg_catalog."default" NOT NULL,
                contrasena character varying COLLATE pg_catalog."default" NOT NULL,
                tipo_usuario character varying COLLATE pg_catalog."default" NOT NULL,
                id_ciudad integer,
                usuario character varying COLLATE pg_catalog."default" NOT NULL,
                descripcion character varying COLLATE pg_catalog."default",
                CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY (id),
                CONSTRAINT "FK_3785318df310caf8cb8e1e37d85" FOREIGN KEY (id_ciudad)
                    REFERENCES public.ciudades (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
            );`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.tipo_contrato
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                descripcion character varying COLLATE pg_catalog."default",
                CONSTRAINT tipo_contrato_pkey PRIMARY KEY (id)
            )`
        );

        

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.sueldos
            (
                base character varying COLLATE pg_catalog."default",
                experiencia_area character varying COLLATE pg_catalog."default",
                experiencia_empresa character varying COLLATE pg_catalog."default",
                bono character varying COLLATE pg_catalog."default",
                comision character varying COLLATE pg_catalog."default",
                propina character varying COLLATE pg_catalog."default",
                moneda character varying COLLATE pg_catalog."default",
                frecuencia character varying COLLATE pg_catalog."default",
                modalidad character varying COLLATE pg_catalog."default",
                id_evaluacion integer NOT NULL,
                CONSTRAINT sueldos_pkey PRIMARY KEY (id_evaluacion),
                CONSTRAINT id_evaluacion FOREIGN KEY (id_evaluacion)
                    REFERENCES public.evaluaciones (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.resenhas
            (
                calificacion integer,
                activo boolean,
                titulo character varying COLLATE pg_catalog."default",
                pros character varying COLLATE pg_catalog."default",
                contras character varying COLLATE pg_catalog."default",
                consejo character varying COLLATE pg_catalog."default",
                modalidad character varying COLLATE pg_catalog."default",
                id_evaluacion integer NOT NULL,
                CONSTRAINT resenha_pkey PRIMARY KEY (id_evaluacion),
                CONSTRAINT id_evaluacion FOREIGN KEY (id_evaluacion)
                    REFERENCES public.evaluaciones (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.preguntas
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                pregunta character varying COLLATE pg_catalog."default",
                respuesta character varying COLLATE pg_catalog."default",
                id_entrevista integer,
                CONSTRAINT preguntas_pkey PRIMARY KEY (id),
                CONSTRAINT id_entrevista FOREIGN KEY (id_entrevista)
                    REFERENCES public.entrevistas (id_evaluacion) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            )`
        );

        

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.beneficios
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                descripcion character varying COLLATE pg_catalog."default",
                CONSTRAINT beneficios_pkey PRIMARY KEY (id)
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.contrato_beneficio
            (
                id_tipo_contrato integer,
                id_beneficio integer,
                CONSTRAINT id_beneficio FOREIGN KEY (id_beneficio)
                    REFERENCES public.beneficios (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION,
                CONSTRAINT id_tipo_contrato FOREIGN KEY (id_tipo_contrato)
                    REFERENCES public.tipo_contrato (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
            )`
        );

        await queryRunner.query(
            `CREATE TABLE IF NOT EXISTS public.detalles_beneficios
            (
                id_beneficio integer,
                id_evaluacion integer,
                CONSTRAINT id_beneficio FOREIGN KEY (id_beneficio)
                    REFERENCES public.beneficios (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID,
                CONSTRAINT id_evaluacion FOREIGN KEY (id_evaluacion)
                    REFERENCES public.evaluaciones (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            )`
        );

    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query('DROP TABLE public.empresas');
        await queryRunner.query('DROP TABLE public.sucursales');
        await queryRunner.query('DROP TABLE public.cargos');
        await queryRunner.query('DROP TABLE public.paises');
        await queryRunner.query('DROP TABLE public.ciudades');
        await queryRunner.query('DROP TABLE public.usuarios');
        await queryRunner.query('DROP TABLE public.tipo_contrato');
        await queryRunner.query('DROP TABLE public.evaluaciones');
        await queryRunner.query('DROP TABLE public.sueldos');
        await queryRunner.query('DROP TABLE public.resenhas');
        await queryRunner.query('DROP TABLE public.preguntas');
        await queryRunner.query('DROP TABLE public.entrevistas');
        await queryRunner.query('DROP TABLE public.beneficios');
        await queryRunner.query('DROP TABLE public.contrato_beneficio');
        await queryRunner.query('DROP TABLE public.detalles_beneficios');
    }

}
